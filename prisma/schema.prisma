// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @unique

  // used by Lucia
  auth_session Session[]
  auth_key     Key[]

  // custom Fields

  // user Information
  username    String @unique
  displayName String
  avatar      String

  // user relationships
  posts     Post[]
  followers Follows[] @relation("following")
  following Follows[] @relation("follower")

  // blocked users
  blockedUsers Blocked[] @relation("blockedBy")
  blockedBy    Blocked[] @relation("blockedUser")
}

// blocked users
model Blocked {
  blockedBy   User   @relation("blockedBy", fields: [blockedById], references: [id])
  blockedById String

  blockedUser   User   @relation("blockedUser", fields: [blockedUserId], references: [id])
  blockedUserId String

  @@id([blockedById, blockedUserId])
  @@unique([blockedById, blockedUserId])
}

// user relationships

// follower / following
model Follows {
  following   User   @relation("following", fields: [followingId], references: [id])
  followingId String

  follower   User   @relation("follower", fields: [followerId], references: [id])
  followerId String

  @@id([followerId, followingId])
  @@unique([followerId, followingId])
}

// forkup models

// post content 
model Post {
  id        String   @id @default(cuid())
  content   String
  author    User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  draft     Boolean  @default(false)
  userId    String
}

// lucia: auth models

// session - used to keep track of active and idle sessions
model Session {
  id             String @id @unique
  user_id        String
  active_expires BigInt
  idle_expires   BigInt
  user           User   @relation(references: [id], fields: [user_id], onDelete: Cascade)

  @@index([user_id])
}

// key: login methods
model Key {
  id              String  @id @unique
  hashed_password String?
  user_id         String
  user            User    @relation(references: [id], fields: [user_id], onDelete: Cascade)

  @@index([user_id])
}
